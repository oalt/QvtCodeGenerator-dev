//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LL.MDE.Components.Qvt.Metamodel.QVTBase
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using LL.MDE.Components.Qvt.Metamodel.EMOF;
    using NMF.Models.Repository;
    using LL.MDE.Components.Qvt.Metamodel.EssentialOCL;
    using System.Collections.Specialized;
    
    
    /// <summary>
    /// The default implementation of the Rule class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/QVT/20140401/QVTBase")]
    [XmlNamespacePrefixAttribute("qvtbase")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/QVTBase#//Rule")]
    [DebuggerDisplayAttribute("Rule {Name}")]
    public abstract partial class Rule : NamedElement, IRule, IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _domainReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDomainReference);
        
        /// <summary>
        /// The backing field for the Domain property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private RuleDomainCollection _domain;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _overridesReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOverridesReference);
        
        /// <summary>
        /// The backing field for the Overrides property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IRule _overrides;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _transformationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveTransformationReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Rule()
        {
            this._domain = new RuleDomainCollection(this);
            this._domain.CollectionChanging += this.DomainCollectionChanging;
            this._domain.CollectionChanged += this.DomainCollectionChanged;
        }
        
        /// <summary>
        /// The domain property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("domain")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("rule")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IDomain> Domain
        {
            get
            {
                return this._domain;
            }
        }
        
        /// <summary>
        /// The overrides property
        /// </summary>
        [DisplayNameAttribute("overrides")]
        [CategoryAttribute("Rule")]
        [XmlElementNameAttribute("overrides")]
        [XmlAttributeAttribute(true)]
        public IRule Overrides
        {
            get
            {
                return this._overrides;
            }
            set
            {
                if ((this._overrides != value))
                {
                    IRule old = this._overrides;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOverridesChanging(e);
                    this.OnPropertyChanging("Overrides", e, _overridesReference);
                    this._overrides = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOverrides;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOverrides;
                    }
                    this.OnOverridesChanged(e);
                    this.OnPropertyChanged("Overrides", e, _overridesReference);
                }
            }
        }
        
        /// <summary>
        /// The transformation property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("transformation")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("rule")]
        public ITransformation Transformation
        {
            get
            {
                return ModelHelper.CastAs<ITransformation>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new RuleChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RuleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/QVTBase#//Rule")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Overrides property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OverridesChanging;
        
        /// <summary>
        /// Gets fired when the Overrides property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OverridesChanged;
        
        /// <summary>
        /// Gets fired before the Transformation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformationChanging;
        
        /// <summary>
        /// Gets fired when the Transformation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformationChanged;
        
        private static NMF.Models.Meta.ITypedElement RetrieveDomainReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.QVTBase.Rule.ClassInstance)).Resolve("domain")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Domain property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DomainCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Domain", e, _domainReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Domain property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DomainCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Domain", e, _domainReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOverridesReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.QVTBase.Rule.ClassInstance)).Resolve("overrides")));
        }
        
        /// <summary>
        /// Raises the OverridesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOverridesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OverridesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OverridesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOverridesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OverridesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Overrides property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOverrides(object sender, System.EventArgs eventArgs)
        {
            this.Overrides = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveTransformationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.QVTBase.Rule.ClassInstance)).Resolve("transformation")));
        }
        
        /// <summary>
        /// Raises the TransformationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            ITransformation oldTransformation = ModelHelper.CastAs<ITransformation>(oldParent);
            ITransformation newTransformation = ModelHelper.CastAs<ITransformation>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldTransformation, newTransformation);
            this.OnTransformationChanging(e);
            this.OnPropertyChanging("Transformation", e, _transformationReference);
        }
        
        /// <summary>
        /// Raises the TransformationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            ITransformation oldTransformation = ModelHelper.CastAs<ITransformation>(oldParent);
            ITransformation newTransformation = ModelHelper.CastAs<ITransformation>(newParent);
            if ((oldTransformation != null))
            {
                oldTransformation.Rule.Remove(this);
            }
            if ((newTransformation != null))
            {
                newTransformation.Rule.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldTransformation, newTransformation);
            this.OnTransformationChanged(e);
            this.OnPropertyChanged("Transformation", e, _transformationReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int domainIndex = ModelHelper.IndexOfReference(this.Domain, element);
            if ((domainIndex != -1))
            {
                return ModelHelper.CreatePath("domain", domainIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "DOMAIN"))
            {
                if ((index < this.Domain.Count))
                {
                    return this.Domain[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "OVERRIDES"))
            {
                return this.Overrides;
            }
            if ((reference == "TRANSFORMATION"))
            {
                return this.Transformation;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "DOMAIN"))
            {
                return this._domain;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OVERRIDES"))
            {
                this.Overrides = ((IRule)(value));
                return;
            }
            if ((feature == "TRANSFORMATION"))
            {
                this.Transformation = ((ITransformation)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OVERRIDES"))
            {
                return new OverridesProxy(this);
            }
            if ((reference == "TRANSFORMATION"))
            {
                return new TransformationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._domain))
            {
                return "domain";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/QVTBase#//Rule")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Rule class
        /// </summary>
        public class RuleChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Rule _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RuleChildrenCollection(Rule parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Domain.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Domain.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Domain.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IDomain domainCasted = item.As<IDomain>();
                if ((domainCasted != null))
                {
                    this._parent.Domain.Add(domainCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Domain.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Domain.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> domainEnumerator = this._parent.Domain.GetEnumerator();
                try
                {
                    for (
                    ; domainEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = domainEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    domainEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IDomain domainItem = item.As<IDomain>();
                if (((domainItem != null) 
                            && this._parent.Domain.Remove(domainItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Domain).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Rule class
        /// </summary>
        public class RuleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Rule _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RuleReferencedElementsCollection(Rule parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Domain.Count);
                    if ((this._parent.Overrides != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Transformation != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Domain.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OverridesChanged += this.PropagateValueChanges;
                this._parent.TransformationChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Domain.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OverridesChanged -= this.PropagateValueChanges;
                this._parent.TransformationChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IDomain domainCasted = item.As<IDomain>();
                if ((domainCasted != null))
                {
                    this._parent.Domain.Add(domainCasted);
                }
                if ((this._parent.Overrides == null))
                {
                    IRule overridesCasted = item.As<IRule>();
                    if ((overridesCasted != null))
                    {
                        this._parent.Overrides = overridesCasted;
                        return;
                    }
                }
                if ((this._parent.Transformation == null))
                {
                    ITransformation transformationCasted = item.As<ITransformation>();
                    if ((transformationCasted != null))
                    {
                        this._parent.Transformation = transformationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Domain.Clear();
                this._parent.Overrides = null;
                this._parent.Transformation = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Domain.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Overrides))
                {
                    return true;
                }
                if ((item == this._parent.Transformation))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> domainEnumerator = this._parent.Domain.GetEnumerator();
                try
                {
                    for (
                    ; domainEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = domainEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    domainEnumerator.Dispose();
                }
                if ((this._parent.Overrides != null))
                {
                    array[arrayIndex] = this._parent.Overrides;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Transformation != null))
                {
                    array[arrayIndex] = this._parent.Transformation;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IDomain domainItem = item.As<IDomain>();
                if (((domainItem != null) 
                            && this._parent.Domain.Remove(domainItem)))
                {
                    return true;
                }
                if ((this._parent.Overrides == item))
                {
                    this._parent.Overrides = null;
                    return true;
                }
                if ((this._parent.Transformation == item))
                {
                    this._parent.Transformation = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Domain).Concat(this._parent.Overrides).Concat(this._parent.Transformation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the overrides property
        /// </summary>
        private sealed class OverridesProxy : ModelPropertyChange<IRule, IRule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OverridesProxy(IRule modelElement) : 
                    base(modelElement, "overrides")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRule Value
            {
                get
                {
                    return this.ModelElement.Overrides;
                }
                set
                {
                    this.ModelElement.Overrides = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transformation property
        /// </summary>
        private sealed class TransformationProxy : ModelPropertyChange<IRule, ITransformation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformationProxy(IRule modelElement) : 
                    base(modelElement, "transformation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransformation Value
            {
                get
                {
                    return this.ModelElement.Transformation;
                }
                set
                {
                    this.ModelElement.Transformation = value;
                }
            }
        }
    }
}
