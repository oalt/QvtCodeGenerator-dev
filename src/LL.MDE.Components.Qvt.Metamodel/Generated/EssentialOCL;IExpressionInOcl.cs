//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LL.MDE.Components.Qvt.Metamodel.EssentialOCL
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using NMF.Models.Repository;
    using System.Collections.Specialized;
    using LL.MDE.Components.Qvt.Metamodel.EMOF;
    
    
    /// <summary>
    /// The public interface for ExpressionInOcl
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ExpressionInOcl))]
    [XmlDefaultImplementationTypeAttribute(typeof(ExpressionInOcl))]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/EssentialOCL#//ExpressionInOcl")]
    public interface IExpressionInOcl : IModelElement, LL.MDE.Components.Qvt.Metamodel.EMOF.ITypedElement
    {
        
        /// <summary>
        /// The bodyExpression property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("bodyExpression")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IOclExpression BodyExpression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextVariable property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("contextVariable")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IVariable ContextVariable
        {
            get;
            set;
        }
        
        /// <summary>
        /// The generatedType property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("generatedType")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<LL.MDE.Components.Qvt.Metamodel.EMOF.IType> GeneratedType
        {
            get;
        }
        
        /// <summary>
        /// The parameterVariable property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("parameterVariable")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IVariable> ParameterVariable
        {
            get;
        }
        
        /// <summary>
        /// The resultVariable property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("resultVariable")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IVariable ResultVariable
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the BodyExpression property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BodyExpressionChanging;
        
        /// <summary>
        /// Gets fired when the BodyExpression property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BodyExpressionChanged;
        
        /// <summary>
        /// Gets fired before the ContextVariable property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ContextVariableChanging;
        
        /// <summary>
        /// Gets fired when the ContextVariable property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ContextVariableChanged;
        
        /// <summary>
        /// Gets fired before the ResultVariable property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ResultVariableChanging;
        
        /// <summary>
        /// Gets fired when the ResultVariable property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ResultVariableChanged;
    }
}
