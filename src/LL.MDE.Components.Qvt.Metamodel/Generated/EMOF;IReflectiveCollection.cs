//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LL.MDE.Components.Qvt.Metamodel.EMOF
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The public interface for ReflectiveCollection
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ReflectiveCollection))]
    [XmlDefaultImplementationTypeAttribute(typeof(ReflectiveCollection))]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/EMOF#//ReflectiveCollection")]
    public interface IReflectiveCollection : IModelElement, IObject
    {
        
        /// <summary>
        /// Gets fired before the operation add gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> AddCalling;
        
        /// <summary>
        /// Gets fired after the operation add got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> AddCalled;
        
        /// <summary>
        /// Gets fired before the operation addAll gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> AddAllCalling;
        
        /// <summary>
        /// Gets fired after the operation addAll got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> AddAllCalled;
        
        /// <summary>
        /// Gets fired before the operation clear gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> ClearCalling;
        
        /// <summary>
        /// Gets fired after the operation clear got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> ClearCalled;
        
        /// <summary>
        /// Gets fired before the operation remove gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> RemoveCalling;
        
        /// <summary>
        /// Gets fired after the operation remove got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> RemoveCalled;
        
        /// <summary>
        /// Gets fired before the operation size gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> SizeCalling;
        
        /// <summary>
        /// Gets fired after the operation size got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> SizeCalled;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="object"></param>
        bool Add(IObject @object);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="objects"></param>
        bool AddAll(IReflectiveSequence objects);
        
        /// <summary>
        /// 
        /// </summary>
        void Clear();
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="object"></param>
        bool Remove(IObject @object);
        
        /// <summary>
        /// 
        /// </summary>
        int Size();
    }
}
