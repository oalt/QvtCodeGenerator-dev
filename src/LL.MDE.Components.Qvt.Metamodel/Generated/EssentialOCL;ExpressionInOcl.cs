//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LL.MDE.Components.Qvt.Metamodel.EssentialOCL
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using NMF.Models.Repository;
    using System.Collections.Specialized;
    using LL.MDE.Components.Qvt.Metamodel.EMOF;
    
    
    /// <summary>
    /// The default implementation of the ExpressionInOcl class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/QVT/20140401/EssentialOCL")]
    [XmlNamespacePrefixAttribute("essentialocl")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/EssentialOCL#//ExpressionInOcl")]
    [DebuggerDisplayAttribute("ExpressionInOcl {Name}")]
    public partial class ExpressionInOcl : EMOF.TypedElement, IExpressionInOcl, IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _bodyExpressionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveBodyExpressionReference);
        
        /// <summary>
        /// The backing field for the BodyExpression property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IOclExpression _bodyExpression;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _contextVariableReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveContextVariableReference);
        
        /// <summary>
        /// The backing field for the ContextVariable property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IVariable _contextVariable;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _generatedTypeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveGeneratedTypeReference);
        
        /// <summary>
        /// The backing field for the GeneratedType property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<LL.MDE.Components.Qvt.Metamodel.EMOF.IType> _generatedType;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _parameterVariableReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveParameterVariableReference);
        
        /// <summary>
        /// The backing field for the ParameterVariable property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IVariable> _parameterVariable;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _resultVariableReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveResultVariableReference);
        
        /// <summary>
        /// The backing field for the ResultVariable property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IVariable _resultVariable;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public ExpressionInOcl()
        {
            this._generatedType = new ObservableCompositionOrderedSet<LL.MDE.Components.Qvt.Metamodel.EMOF.IType>(this);
            this._generatedType.CollectionChanging += this.GeneratedTypeCollectionChanging;
            this._generatedType.CollectionChanged += this.GeneratedTypeCollectionChanged;
            this._parameterVariable = new ObservableCompositionOrderedSet<IVariable>(this);
            this._parameterVariable.CollectionChanging += this.ParameterVariableCollectionChanging;
            this._parameterVariable.CollectionChanged += this.ParameterVariableCollectionChanged;
        }
        
        /// <summary>
        /// The bodyExpression property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("bodyExpression")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IOclExpression BodyExpression
        {
            get
            {
                return this._bodyExpression;
            }
            set
            {
                if ((this._bodyExpression != value))
                {
                    IOclExpression old = this._bodyExpression;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBodyExpressionChanging(e);
                    this.OnPropertyChanging("BodyExpression", e, _bodyExpressionReference);
                    this._bodyExpression = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetBodyExpression;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetBodyExpression;
                    }
                    this.OnBodyExpressionChanged(e);
                    this.OnPropertyChanged("BodyExpression", e, _bodyExpressionReference);
                }
            }
        }
        
        /// <summary>
        /// The contextVariable property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("contextVariable")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IVariable ContextVariable
        {
            get
            {
                return this._contextVariable;
            }
            set
            {
                if ((this._contextVariable != value))
                {
                    IVariable old = this._contextVariable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnContextVariableChanging(e);
                    this.OnPropertyChanging("ContextVariable", e, _contextVariableReference);
                    this._contextVariable = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetContextVariable;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetContextVariable;
                    }
                    this.OnContextVariableChanged(e);
                    this.OnPropertyChanged("ContextVariable", e, _contextVariableReference);
                }
            }
        }
        
        /// <summary>
        /// The generatedType property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("generatedType")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<LL.MDE.Components.Qvt.Metamodel.EMOF.IType> GeneratedType
        {
            get
            {
                return this._generatedType;
            }
        }
        
        /// <summary>
        /// The parameterVariable property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("parameterVariable")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IVariable> ParameterVariable
        {
            get
            {
                return this._parameterVariable;
            }
        }
        
        /// <summary>
        /// The resultVariable property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("resultVariable")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IVariable ResultVariable
        {
            get
            {
                return this._resultVariable;
            }
            set
            {
                if ((this._resultVariable != value))
                {
                    IVariable old = this._resultVariable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnResultVariableChanging(e);
                    this.OnPropertyChanging("ResultVariable", e, _resultVariableReference);
                    this._resultVariable = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetResultVariable;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetResultVariable;
                    }
                    this.OnResultVariableChanged(e);
                    this.OnPropertyChanged("ResultVariable", e, _resultVariableReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ExpressionInOclChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ExpressionInOclReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/EssentialOCL#//ExpressionInOcl")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the BodyExpression property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BodyExpressionChanging;
        
        /// <summary>
        /// Gets fired when the BodyExpression property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BodyExpressionChanged;
        
        /// <summary>
        /// Gets fired before the ContextVariable property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ContextVariableChanging;
        
        /// <summary>
        /// Gets fired when the ContextVariable property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ContextVariableChanged;
        
        /// <summary>
        /// Gets fired before the ResultVariable property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResultVariableChanging;
        
        /// <summary>
        /// Gets fired when the ResultVariable property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResultVariableChanged;
        
        private static NMF.Models.Meta.ITypedElement RetrieveBodyExpressionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.EssentialOCL.ExpressionInOcl.ClassInstance)).Resolve("bodyExpression")));
        }
        
        /// <summary>
        /// Raises the BodyExpressionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBodyExpressionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BodyExpressionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BodyExpressionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBodyExpressionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BodyExpressionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BodyExpression property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBodyExpression(object sender, System.EventArgs eventArgs)
        {
            this.BodyExpression = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveContextVariableReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.EssentialOCL.ExpressionInOcl.ClassInstance)).Resolve("contextVariable")));
        }
        
        /// <summary>
        /// Raises the ContextVariableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContextVariableChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ContextVariableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ContextVariableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContextVariableChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ContextVariableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ContextVariable property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetContextVariable(object sender, System.EventArgs eventArgs)
        {
            this.ContextVariable = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveGeneratedTypeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.EssentialOCL.ExpressionInOcl.ClassInstance)).Resolve("generatedType")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GeneratedType property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GeneratedTypeCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("GeneratedType", e, _generatedTypeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GeneratedType property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GeneratedTypeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GeneratedType", e, _generatedTypeReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveParameterVariableReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.EssentialOCL.ExpressionInOcl.ClassInstance)).Resolve("parameterVariable")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ParameterVariable property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ParameterVariableCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ParameterVariable", e, _parameterVariableReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ParameterVariable property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ParameterVariableCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ParameterVariable", e, _parameterVariableReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveResultVariableReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.EssentialOCL.ExpressionInOcl.ClassInstance)).Resolve("resultVariable")));
        }
        
        /// <summary>
        /// Raises the ResultVariableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResultVariableChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResultVariableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ResultVariableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResultVariableChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResultVariableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ResultVariable property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetResultVariable(object sender, System.EventArgs eventArgs)
        {
            this.ResultVariable = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.BodyExpression))
            {
                return ModelHelper.CreatePath("bodyExpression");
            }
            if ((element == this.ContextVariable))
            {
                return ModelHelper.CreatePath("contextVariable");
            }
            int generatedTypeIndex = ModelHelper.IndexOfReference(this.GeneratedType, element);
            if ((generatedTypeIndex != -1))
            {
                return ModelHelper.CreatePath("generatedType", generatedTypeIndex);
            }
            int parameterVariableIndex = ModelHelper.IndexOfReference(this.ParameterVariable, element);
            if ((parameterVariableIndex != -1))
            {
                return ModelHelper.CreatePath("parameterVariable", parameterVariableIndex);
            }
            if ((element == this.ResultVariable))
            {
                return ModelHelper.CreatePath("resultVariable");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "BODYEXPRESSION"))
            {
                return this.BodyExpression;
            }
            if ((reference == "CONTEXTVARIABLE"))
            {
                return this.ContextVariable;
            }
            if ((reference == "GENERATEDTYPE"))
            {
                if ((index < this.GeneratedType.Count))
                {
                    return this.GeneratedType[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "PARAMETERVARIABLE"))
            {
                if ((index < this.ParameterVariable.Count))
                {
                    return this.ParameterVariable[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "RESULTVARIABLE"))
            {
                return this.ResultVariable;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "GENERATEDTYPE"))
            {
                return this._generatedType;
            }
            if ((feature == "PARAMETERVARIABLE"))
            {
                return this._parameterVariable;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BODYEXPRESSION"))
            {
                this.BodyExpression = ((IOclExpression)(value));
                return;
            }
            if ((feature == "CONTEXTVARIABLE"))
            {
                this.ContextVariable = ((IVariable)(value));
                return;
            }
            if ((feature == "RESULTVARIABLE"))
            {
                this.ResultVariable = ((IVariable)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "BODYEXPRESSION"))
            {
                return new BodyExpressionProxy(this);
            }
            if ((reference == "CONTEXTVARIABLE"))
            {
                return new ContextVariableProxy(this);
            }
            if ((reference == "RESULTVARIABLE"))
            {
                return new ResultVariableProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._generatedType))
            {
                return "generatedType";
            }
            if ((container == this._parameterVariable))
            {
                return "parameterVariable";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/EssentialOCL#//ExpressionInOcl")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ExpressionInOcl class
        /// </summary>
        public class ExpressionInOclChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ExpressionInOcl _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ExpressionInOclChildrenCollection(ExpressionInOcl parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.BodyExpression != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ContextVariable != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.GeneratedType.Count);
                    count = (count + this._parent.ParameterVariable.Count);
                    if ((this._parent.ResultVariable != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BodyExpressionChanged += this.PropagateValueChanges;
                this._parent.ContextVariableChanged += this.PropagateValueChanges;
                this._parent.GeneratedType.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ParameterVariable.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ResultVariableChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BodyExpressionChanged -= this.PropagateValueChanges;
                this._parent.ContextVariableChanged -= this.PropagateValueChanges;
                this._parent.GeneratedType.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ParameterVariable.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ResultVariableChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.BodyExpression == null))
                {
                    IOclExpression bodyExpressionCasted = item.As<IOclExpression>();
                    if ((bodyExpressionCasted != null))
                    {
                        this._parent.BodyExpression = bodyExpressionCasted;
                        return;
                    }
                }
                if ((this._parent.ContextVariable == null))
                {
                    IVariable contextVariableCasted = item.As<IVariable>();
                    if ((contextVariableCasted != null))
                    {
                        this._parent.ContextVariable = contextVariableCasted;
                        return;
                    }
                }
                LL.MDE.Components.Qvt.Metamodel.EMOF.IType generatedTypeCasted = item.As<LL.MDE.Components.Qvt.Metamodel.EMOF.IType>();
                if ((generatedTypeCasted != null))
                {
                    this._parent.GeneratedType.Add(generatedTypeCasted);
                }
                IVariable parameterVariableCasted = item.As<IVariable>();
                if ((parameterVariableCasted != null))
                {
                    this._parent.ParameterVariable.Add(parameterVariableCasted);
                }
                if ((this._parent.ResultVariable == null))
                {
                    IVariable resultVariableCasted = item.As<IVariable>();
                    if ((resultVariableCasted != null))
                    {
                        this._parent.ResultVariable = resultVariableCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.BodyExpression = null;
                this._parent.ContextVariable = null;
                this._parent.GeneratedType.Clear();
                this._parent.ParameterVariable.Clear();
                this._parent.ResultVariable = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.BodyExpression))
                {
                    return true;
                }
                if ((item == this._parent.ContextVariable))
                {
                    return true;
                }
                if (this._parent.GeneratedType.Contains(item))
                {
                    return true;
                }
                if (this._parent.ParameterVariable.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ResultVariable))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.BodyExpression != null))
                {
                    array[arrayIndex] = this._parent.BodyExpression;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ContextVariable != null))
                {
                    array[arrayIndex] = this._parent.ContextVariable;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> generatedTypeEnumerator = this._parent.GeneratedType.GetEnumerator();
                try
                {
                    for (
                    ; generatedTypeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = generatedTypeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    generatedTypeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> parameterVariableEnumerator = this._parent.ParameterVariable.GetEnumerator();
                try
                {
                    for (
                    ; parameterVariableEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = parameterVariableEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    parameterVariableEnumerator.Dispose();
                }
                if ((this._parent.ResultVariable != null))
                {
                    array[arrayIndex] = this._parent.ResultVariable;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.BodyExpression == item))
                {
                    this._parent.BodyExpression = null;
                    return true;
                }
                if ((this._parent.ContextVariable == item))
                {
                    this._parent.ContextVariable = null;
                    return true;
                }
                LL.MDE.Components.Qvt.Metamodel.EMOF.IType typeItem = item.As<LL.MDE.Components.Qvt.Metamodel.EMOF.IType>();
                if (((typeItem != null) 
                            && this._parent.GeneratedType.Remove(typeItem)))
                {
                    return true;
                }
                IVariable variableItem = item.As<IVariable>();
                if (((variableItem != null) 
                            && this._parent.ParameterVariable.Remove(variableItem)))
                {
                    return true;
                }
                if ((this._parent.ResultVariable == item))
                {
                    this._parent.ResultVariable = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.BodyExpression).Concat(this._parent.ContextVariable).Concat(this._parent.GeneratedType).Concat(this._parent.ParameterVariable).Concat(this._parent.ResultVariable).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ExpressionInOcl class
        /// </summary>
        public class ExpressionInOclReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ExpressionInOcl _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ExpressionInOclReferencedElementsCollection(ExpressionInOcl parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.BodyExpression != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ContextVariable != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.GeneratedType.Count);
                    count = (count + this._parent.ParameterVariable.Count);
                    if ((this._parent.ResultVariable != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BodyExpressionChanged += this.PropagateValueChanges;
                this._parent.ContextVariableChanged += this.PropagateValueChanges;
                this._parent.GeneratedType.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ParameterVariable.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ResultVariableChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BodyExpressionChanged -= this.PropagateValueChanges;
                this._parent.ContextVariableChanged -= this.PropagateValueChanges;
                this._parent.GeneratedType.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ParameterVariable.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ResultVariableChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.BodyExpression == null))
                {
                    IOclExpression bodyExpressionCasted = item.As<IOclExpression>();
                    if ((bodyExpressionCasted != null))
                    {
                        this._parent.BodyExpression = bodyExpressionCasted;
                        return;
                    }
                }
                if ((this._parent.ContextVariable == null))
                {
                    IVariable contextVariableCasted = item.As<IVariable>();
                    if ((contextVariableCasted != null))
                    {
                        this._parent.ContextVariable = contextVariableCasted;
                        return;
                    }
                }
                LL.MDE.Components.Qvt.Metamodel.EMOF.IType generatedTypeCasted = item.As<LL.MDE.Components.Qvt.Metamodel.EMOF.IType>();
                if ((generatedTypeCasted != null))
                {
                    this._parent.GeneratedType.Add(generatedTypeCasted);
                }
                IVariable parameterVariableCasted = item.As<IVariable>();
                if ((parameterVariableCasted != null))
                {
                    this._parent.ParameterVariable.Add(parameterVariableCasted);
                }
                if ((this._parent.ResultVariable == null))
                {
                    IVariable resultVariableCasted = item.As<IVariable>();
                    if ((resultVariableCasted != null))
                    {
                        this._parent.ResultVariable = resultVariableCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.BodyExpression = null;
                this._parent.ContextVariable = null;
                this._parent.GeneratedType.Clear();
                this._parent.ParameterVariable.Clear();
                this._parent.ResultVariable = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.BodyExpression))
                {
                    return true;
                }
                if ((item == this._parent.ContextVariable))
                {
                    return true;
                }
                if (this._parent.GeneratedType.Contains(item))
                {
                    return true;
                }
                if (this._parent.ParameterVariable.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ResultVariable))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.BodyExpression != null))
                {
                    array[arrayIndex] = this._parent.BodyExpression;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ContextVariable != null))
                {
                    array[arrayIndex] = this._parent.ContextVariable;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> generatedTypeEnumerator = this._parent.GeneratedType.GetEnumerator();
                try
                {
                    for (
                    ; generatedTypeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = generatedTypeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    generatedTypeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> parameterVariableEnumerator = this._parent.ParameterVariable.GetEnumerator();
                try
                {
                    for (
                    ; parameterVariableEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = parameterVariableEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    parameterVariableEnumerator.Dispose();
                }
                if ((this._parent.ResultVariable != null))
                {
                    array[arrayIndex] = this._parent.ResultVariable;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.BodyExpression == item))
                {
                    this._parent.BodyExpression = null;
                    return true;
                }
                if ((this._parent.ContextVariable == item))
                {
                    this._parent.ContextVariable = null;
                    return true;
                }
                LL.MDE.Components.Qvt.Metamodel.EMOF.IType typeItem = item.As<LL.MDE.Components.Qvt.Metamodel.EMOF.IType>();
                if (((typeItem != null) 
                            && this._parent.GeneratedType.Remove(typeItem)))
                {
                    return true;
                }
                IVariable variableItem = item.As<IVariable>();
                if (((variableItem != null) 
                            && this._parent.ParameterVariable.Remove(variableItem)))
                {
                    return true;
                }
                if ((this._parent.ResultVariable == item))
                {
                    this._parent.ResultVariable = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.BodyExpression).Concat(this._parent.ContextVariable).Concat(this._parent.GeneratedType).Concat(this._parent.ParameterVariable).Concat(this._parent.ResultVariable).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the bodyExpression property
        /// </summary>
        private sealed class BodyExpressionProxy : ModelPropertyChange<IExpressionInOcl, IOclExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BodyExpressionProxy(IExpressionInOcl modelElement) : 
                    base(modelElement, "bodyExpression")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOclExpression Value
            {
                get
                {
                    return this.ModelElement.BodyExpression;
                }
                set
                {
                    this.ModelElement.BodyExpression = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the contextVariable property
        /// </summary>
        private sealed class ContextVariableProxy : ModelPropertyChange<IExpressionInOcl, IVariable>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ContextVariableProxy(IExpressionInOcl modelElement) : 
                    base(modelElement, "contextVariable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IVariable Value
            {
                get
                {
                    return this.ModelElement.ContextVariable;
                }
                set
                {
                    this.ModelElement.ContextVariable = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the resultVariable property
        /// </summary>
        private sealed class ResultVariableProxy : ModelPropertyChange<IExpressionInOcl, IVariable>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResultVariableProxy(IExpressionInOcl modelElement) : 
                    base(modelElement, "resultVariable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IVariable Value
            {
                get
                {
                    return this.ModelElement.ResultVariable;
                }
                set
                {
                    this.ModelElement.ResultVariable = value;
                }
            }
        }
    }
}
