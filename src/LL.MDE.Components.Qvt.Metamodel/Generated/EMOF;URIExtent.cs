//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LL.MDE.Components.Qvt.Metamodel.EMOF
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The default implementation of the URIExtent class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/QVT/20140401/EMOF")]
    [XmlNamespacePrefixAttribute("emof")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/EMOF#//URIExtent")]
    public partial class URIExtent : Extent, IURIExtent, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _contextURIOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveContextURIOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _elementOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveElementOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _uriOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUriOperation);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/EMOF#//URIExtent")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the operation contextURI gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> ContextURICalling;
        
        /// <summary>
        /// Gets fired after the operation contextURI got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> ContextURICalled;
        
        /// <summary>
        /// Gets fired before the operation element gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> ElementCalling;
        
        /// <summary>
        /// Gets fired after the operation element got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> ElementCalled;
        
        /// <summary>
        /// Gets fired before the operation uri gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> UriCalling;
        
        /// <summary>
        /// Gets fired after the operation uri got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> UriCalled;
        
        /// <summary>
        /// 
        /// </summary>
        public string ContextURI()
        {
            System.Func<IURIExtent, string> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IURIExtent, string>>(_contextURIOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method contextURI registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _contextURIOperation.Value);
            this.OnContextURICalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _contextURIOperation.Value, e));
            string result = handler.Invoke(this);
            e.Result = result;
            this.OnContextURICalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _contextURIOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveContextURIOperation()
        {
            return ClassInstance.LookupOperation("contextURI");
        }
        
        /// <summary>
        /// Raises the ContextURICalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContextURICalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.ContextURICalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ContextURICalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContextURICalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.ContextURICalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="uri"></param>
        public IElement Element(string uri)
        {
            System.Func<IURIExtent, string, IElement> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IURIExtent, string, IElement>>(_elementOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method element registered. Use the method broker t" +
                        "o register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _elementOperation.Value, uri);
            this.OnElementCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _elementOperation.Value, e));
            IElement result = handler.Invoke(this, uri);
            e.Result = result;
            this.OnElementCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _elementOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveElementOperation()
        {
            return ClassInstance.LookupOperation("element");
        }
        
        /// <summary>
        /// Raises the ElementCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElementCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.ElementCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ElementCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElementCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.ElementCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="element"></param>
        public string Uri(IElement element)
        {
            System.Func<IURIExtent, IElement, string> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IURIExtent, IElement, string>>(_uriOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method uri registered. Use the method broker to re" +
                        "gister a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _uriOperation.Value, element);
            this.OnUriCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _uriOperation.Value, e));
            string result = handler.Invoke(this, element);
            e.Result = result;
            this.OnUriCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _uriOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUriOperation()
        {
            return ClassInstance.LookupOperation("uri");
        }
        
        /// <summary>
        /// Raises the UriCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUriCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.UriCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UriCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUriCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.UriCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/EMOF#//URIExtent")));
            }
            return _classInstance;
        }
    }
}
