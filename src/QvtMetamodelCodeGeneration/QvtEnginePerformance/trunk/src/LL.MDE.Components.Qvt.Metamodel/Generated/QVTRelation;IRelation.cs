//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LL.MDE.Components.Qvt.Metamodel.QVTRelation
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using LL.MDE.Components.Qvt.Metamodel.QVTBase;
    using LL.MDE.Components.Qvt.Metamodel.QVTTemplate;
    using NMF.Models.Repository;
    using LL.MDE.Components.Qvt.Metamodel.EMOF;
    using System.Collections.Specialized;
    using LL.MDE.Components.Qvt.Metamodel.EssentialOCL;
    
    
    /// <summary>
    /// The public interface for Relation
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Relation))]
    [XmlDefaultImplementationTypeAttribute(typeof(Relation))]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/QVTRelation#//Relation")]
    public interface IRelation : IModelElement, IRule
    {
        
        /// <summary>
        /// The isTopLevel property
        /// </summary>
        [DisplayNameAttribute("isTopLevel")]
        [CategoryAttribute("Relation")]
        [XmlElementNameAttribute("isTopLevel")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> IsTopLevel
        {
            get;
            set;
        }
        
        /// <summary>
        /// The operationalImpl property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("operationalImpl")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("relation")]
        [ConstantAttribute()]
        IOrderedSetExpression<IRelationImplementation> OperationalImpl
        {
            get;
        }
        
        /// <summary>
        /// The variable property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("variable")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IVariable> Variable
        {
            get;
        }
        
        /// <summary>
        /// The when property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("when")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IPattern When
        {
            get;
            set;
        }
        
        /// <summary>
        /// The where property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("where")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IPattern Where
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the IsTopLevel property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsTopLevelChanged;
        
        /// <summary>
        /// Gets fired before the IsTopLevel property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsTopLevelChanging;
        
        /// <summary>
        /// Gets fired before the When property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WhenChanging;
        
        /// <summary>
        /// Gets fired when the When property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WhenChanged;
        
        /// <summary>
        /// Gets fired before the Where property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WhereChanging;
        
        /// <summary>
        /// Gets fired when the Where property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WhereChanged;
    }
}
