//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LL.MDE.Components.Qvt.Metamodel.QVTBase
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using LL.MDE.Components.Qvt.Metamodel.EMOF;
    using NMF.Models.Repository;
    using LL.MDE.Components.Qvt.Metamodel.EssentialOCL;
    using System.Collections.Specialized;
    
    
    /// <summary>
    /// The public interface for Domain
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Domain))]
    [XmlDefaultImplementationTypeAttribute(typeof(Domain))]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/QVTBase#//Domain")]
    public interface IDomain : IModelElement, INamedElement
    {
        
        /// <summary>
        /// The isCheckable property
        /// </summary>
        [DisplayNameAttribute("isCheckable")]
        [CategoryAttribute("Domain")]
        [XmlElementNameAttribute("isCheckable")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> IsCheckable
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isEnforceable property
        /// </summary>
        [DisplayNameAttribute("isEnforceable")]
        [CategoryAttribute("Domain")]
        [XmlElementNameAttribute("isEnforceable")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> IsEnforceable
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rule property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("rule")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("domain")]
        IRule Rule
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typedModel property
        /// </summary>
        [DisplayNameAttribute("typedModel")]
        [CategoryAttribute("Domain")]
        [XmlElementNameAttribute("typedModel")]
        [XmlAttributeAttribute(true)]
        ITypedModel TypedModel
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the IsCheckable property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsCheckableChanged;
        
        /// <summary>
        /// Gets fired before the IsCheckable property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsCheckableChanging;
        
        /// <summary>
        /// Gets fired when the IsEnforceable property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsEnforceableChanged;
        
        /// <summary>
        /// Gets fired before the IsEnforceable property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsEnforceableChanging;
        
        /// <summary>
        /// Gets fired before the Rule property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RuleChanging;
        
        /// <summary>
        /// Gets fired when the Rule property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RuleChanged;
        
        /// <summary>
        /// Gets fired before the TypedModel property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TypedModelChanging;
        
        /// <summary>
        /// Gets fired when the TypedModel property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TypedModelChanged;
    }
}
