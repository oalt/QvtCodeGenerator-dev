//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LL.MDE.Components.Qvt.Metamodel.EssentialOCL
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using NMF.Models.Repository;
    using System.Collections.Specialized;
    using LL.MDE.Components.Qvt.Metamodel.EMOF;
    
    
    /// <summary>
    /// The default implementation of the Variable class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/QVT/20140401/EssentialOCL")]
    [XmlNamespacePrefixAttribute("essentialocl")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/EssentialOCL#//Variable")]
    [DebuggerDisplayAttribute("Variable {Name}")]
    public partial class Variable : EMOF.TypedElement, IVariable, IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _initExpressionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveInitExpressionReference);
        
        /// <summary>
        /// The backing field for the InitExpression property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IOclExpression _initExpression;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _letExpReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveLetExpReference);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _representedParameterReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRepresentedParameterReference);
        
        /// <summary>
        /// The backing field for the RepresentedParameter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private LL.MDE.Components.Qvt.Metamodel.EMOF.IParameter _representedParameter;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The initExpression property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("initExpression")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IOclExpression InitExpression
        {
            get
            {
                return this._initExpression;
            }
            set
            {
                if ((this._initExpression != value))
                {
                    IOclExpression old = this._initExpression;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInitExpressionChanging(e);
                    this.OnPropertyChanging("InitExpression", e, _initExpressionReference);
                    this._initExpression = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetInitExpression;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetInitExpression;
                    }
                    this.OnInitExpressionChanged(e);
                    this.OnPropertyChanged("InitExpression", e, _initExpressionReference);
                }
            }
        }
        
        /// <summary>
        /// The letExp property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("letExp")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("variable")]
        public ILetExp LetExp
        {
            get
            {
                return ModelHelper.CastAs<ILetExp>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The representedParameter property
        /// </summary>
        [DisplayNameAttribute("representedParameter")]
        [CategoryAttribute("Variable")]
        [XmlElementNameAttribute("representedParameter")]
        [XmlAttributeAttribute(true)]
        public LL.MDE.Components.Qvt.Metamodel.EMOF.IParameter RepresentedParameter
        {
            get
            {
                return this._representedParameter;
            }
            set
            {
                if ((this._representedParameter != value))
                {
                    LL.MDE.Components.Qvt.Metamodel.EMOF.IParameter old = this._representedParameter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRepresentedParameterChanging(e);
                    this.OnPropertyChanging("RepresentedParameter", e, _representedParameterReference);
                    this._representedParameter = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRepresentedParameter;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRepresentedParameter;
                    }
                    this.OnRepresentedParameterChanged(e);
                    this.OnPropertyChanged("RepresentedParameter", e, _representedParameterReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new VariableChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new VariableReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/EssentialOCL#//Variable")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the InitExpression property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InitExpressionChanging;
        
        /// <summary>
        /// Gets fired when the InitExpression property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InitExpressionChanged;
        
        /// <summary>
        /// Gets fired before the LetExp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LetExpChanging;
        
        /// <summary>
        /// Gets fired when the LetExp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LetExpChanged;
        
        /// <summary>
        /// Gets fired before the RepresentedParameter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RepresentedParameterChanging;
        
        /// <summary>
        /// Gets fired when the RepresentedParameter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RepresentedParameterChanged;
        
        private static NMF.Models.Meta.ITypedElement RetrieveInitExpressionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.EssentialOCL.Variable.ClassInstance)).Resolve("initExpression")));
        }
        
        /// <summary>
        /// Raises the InitExpressionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInitExpressionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InitExpressionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InitExpressionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInitExpressionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InitExpressionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the InitExpression property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInitExpression(object sender, System.EventArgs eventArgs)
        {
            this.InitExpression = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveLetExpReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.EssentialOCL.Variable.ClassInstance)).Resolve("letExp")));
        }
        
        /// <summary>
        /// Raises the LetExpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLetExpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LetExpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            ILetExp oldLetExp = ModelHelper.CastAs<ILetExp>(oldParent);
            ILetExp newLetExp = ModelHelper.CastAs<ILetExp>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldLetExp, newLetExp);
            this.OnLetExpChanging(e);
            this.OnPropertyChanging("LetExp", e, _letExpReference);
        }
        
        /// <summary>
        /// Raises the LetExpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLetExpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LetExpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            ILetExp oldLetExp = ModelHelper.CastAs<ILetExp>(oldParent);
            ILetExp newLetExp = ModelHelper.CastAs<ILetExp>(newParent);
            if ((oldLetExp != null))
            {
                oldLetExp.Variable = null;
            }
            if ((newLetExp != null))
            {
                newLetExp.Variable = this;
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldLetExp, newLetExp);
            this.OnLetExpChanged(e);
            this.OnPropertyChanged("LetExp", e, _letExpReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRepresentedParameterReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.EssentialOCL.Variable.ClassInstance)).Resolve("representedParameter")));
        }
        
        /// <summary>
        /// Raises the RepresentedParameterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRepresentedParameterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RepresentedParameterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RepresentedParameterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRepresentedParameterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RepresentedParameterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RepresentedParameter property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRepresentedParameter(object sender, System.EventArgs eventArgs)
        {
            this.RepresentedParameter = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.InitExpression))
            {
                return ModelHelper.CreatePath("initExpression");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "INITEXPRESSION"))
            {
                return this.InitExpression;
            }
            if ((reference == "LETEXP"))
            {
                return this.LetExp;
            }
            if ((reference == "REPRESENTEDPARAMETER"))
            {
                return this.RepresentedParameter;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "INITEXPRESSION"))
            {
                this.InitExpression = ((IOclExpression)(value));
                return;
            }
            if ((feature == "LETEXP"))
            {
                this.LetExp = ((ILetExp)(value));
                return;
            }
            if ((feature == "REPRESENTEDPARAMETER"))
            {
                this.RepresentedParameter = ((LL.MDE.Components.Qvt.Metamodel.EMOF.IParameter)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "INITEXPRESSION"))
            {
                return new InitExpressionProxy(this);
            }
            if ((reference == "LETEXP"))
            {
                return new LetExpProxy(this);
            }
            if ((reference == "REPRESENTEDPARAMETER"))
            {
                return new RepresentedParameterProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/EssentialOCL#//Variable")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Variable class
        /// </summary>
        public class VariableChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Variable _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public VariableChildrenCollection(Variable parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.InitExpression != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.InitExpressionChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.InitExpressionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.InitExpression == null))
                {
                    IOclExpression initExpressionCasted = item.As<IOclExpression>();
                    if ((initExpressionCasted != null))
                    {
                        this._parent.InitExpression = initExpressionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.InitExpression = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.InitExpression))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.InitExpression != null))
                {
                    array[arrayIndex] = this._parent.InitExpression;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.InitExpression == item))
                {
                    this._parent.InitExpression = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.InitExpression).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Variable class
        /// </summary>
        public class VariableReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Variable _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public VariableReferencedElementsCollection(Variable parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.InitExpression != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LetExp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RepresentedParameter != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.InitExpressionChanged += this.PropagateValueChanges;
                this._parent.LetExpChanged += this.PropagateValueChanges;
                this._parent.RepresentedParameterChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.InitExpressionChanged -= this.PropagateValueChanges;
                this._parent.LetExpChanged -= this.PropagateValueChanges;
                this._parent.RepresentedParameterChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.InitExpression == null))
                {
                    IOclExpression initExpressionCasted = item.As<IOclExpression>();
                    if ((initExpressionCasted != null))
                    {
                        this._parent.InitExpression = initExpressionCasted;
                        return;
                    }
                }
                if ((this._parent.LetExp == null))
                {
                    ILetExp letExpCasted = item.As<ILetExp>();
                    if ((letExpCasted != null))
                    {
                        this._parent.LetExp = letExpCasted;
                        return;
                    }
                }
                if ((this._parent.RepresentedParameter == null))
                {
                    LL.MDE.Components.Qvt.Metamodel.EMOF.IParameter representedParameterCasted = item.As<LL.MDE.Components.Qvt.Metamodel.EMOF.IParameter>();
                    if ((representedParameterCasted != null))
                    {
                        this._parent.RepresentedParameter = representedParameterCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.InitExpression = null;
                this._parent.LetExp = null;
                this._parent.RepresentedParameter = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.InitExpression))
                {
                    return true;
                }
                if ((item == this._parent.LetExp))
                {
                    return true;
                }
                if ((item == this._parent.RepresentedParameter))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.InitExpression != null))
                {
                    array[arrayIndex] = this._parent.InitExpression;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LetExp != null))
                {
                    array[arrayIndex] = this._parent.LetExp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RepresentedParameter != null))
                {
                    array[arrayIndex] = this._parent.RepresentedParameter;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.InitExpression == item))
                {
                    this._parent.InitExpression = null;
                    return true;
                }
                if ((this._parent.LetExp == item))
                {
                    this._parent.LetExp = null;
                    return true;
                }
                if ((this._parent.RepresentedParameter == item))
                {
                    this._parent.RepresentedParameter = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.InitExpression).Concat(this._parent.LetExp).Concat(this._parent.RepresentedParameter).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the initExpression property
        /// </summary>
        private sealed class InitExpressionProxy : ModelPropertyChange<IVariable, IOclExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InitExpressionProxy(IVariable modelElement) : 
                    base(modelElement, "initExpression")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOclExpression Value
            {
                get
                {
                    return this.ModelElement.InitExpression;
                }
                set
                {
                    this.ModelElement.InitExpression = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the letExp property
        /// </summary>
        private sealed class LetExpProxy : ModelPropertyChange<IVariable, ILetExp>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LetExpProxy(IVariable modelElement) : 
                    base(modelElement, "letExp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILetExp Value
            {
                get
                {
                    return this.ModelElement.LetExp;
                }
                set
                {
                    this.ModelElement.LetExp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the representedParameter property
        /// </summary>
        private sealed class RepresentedParameterProxy : ModelPropertyChange<IVariable, LL.MDE.Components.Qvt.Metamodel.EMOF.IParameter>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RepresentedParameterProxy(IVariable modelElement) : 
                    base(modelElement, "representedParameter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override LL.MDE.Components.Qvt.Metamodel.EMOF.IParameter Value
            {
                get
                {
                    return this.ModelElement.RepresentedParameter;
                }
                set
                {
                    this.ModelElement.RepresentedParameter = value;
                }
            }
        }
    }
}
