//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LL.MDE.Components.Qvt.Metamodel.EssentialOCL
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using NMF.Models.Repository;
    using System.Collections.Specialized;
    using LL.MDE.Components.Qvt.Metamodel.EMOF;
    
    
    /// <summary>
    /// The default implementation of the UnlimitedNaturalExp class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/QVT/20140401/EssentialOCL")]
    [XmlNamespacePrefixAttribute("essentialocl")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/EssentialOCL#//UnlimitedNaturalExp")]
    [DebuggerDisplayAttribute("UnlimitedNaturalExp {Name}")]
    public partial class UnlimitedNaturalExp : NumericLiteralExp, IUnlimitedNaturalExp, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Symbol property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _symbol;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _symbolAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSymbolAttribute);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The symbol property
        /// </summary>
        [DisplayNameAttribute("symbol")]
        [CategoryAttribute("UnlimitedNaturalExp")]
        [XmlElementNameAttribute("symbol")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Symbol
        {
            get
            {
                return this._symbol;
            }
            set
            {
                if ((this._symbol != value))
                {
                    Nullable<int> old = this._symbol;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSymbolChanging(e);
                    this.OnPropertyChanging("Symbol", e, _symbolAttribute);
                    this._symbol = value;
                    this.OnSymbolChanged(e);
                    this.OnPropertyChanged("Symbol", e, _symbolAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/EssentialOCL#//UnlimitedNaturalExp")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Symbol property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SymbolChanged;
        
        /// <summary>
        /// Gets fired before the Symbol property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SymbolChanging;
        
        private static NMF.Models.Meta.ITypedElement RetrieveSymbolAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.EssentialOCL.UnlimitedNaturalExp.ClassInstance)).Resolve("symbol")));
        }
        
        /// <summary>
        /// Raises the SymbolChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSymbolChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SymbolChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SymbolChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSymbolChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SymbolChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SYMBOL"))
            {
                return this.Symbol;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SYMBOL"))
            {
                this.Symbol = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SYMBOL"))
            {
                return Observable.Box(new SymbolProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/EssentialOCL#//UnlimitedNaturalExp")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the symbol property
        /// </summary>
        private sealed class SymbolProxy : ModelPropertyChange<IUnlimitedNaturalExp, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SymbolProxy(IUnlimitedNaturalExp modelElement) : 
                    base(modelElement, "symbol")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Symbol;
                }
                set
                {
                    this.ModelElement.Symbol = value;
                }
            }
        }
    }
}
