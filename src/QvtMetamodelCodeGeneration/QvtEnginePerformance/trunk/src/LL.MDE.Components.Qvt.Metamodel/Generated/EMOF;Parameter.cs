//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LL.MDE.Components.Qvt.Metamodel.EMOF
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The default implementation of the Parameter class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/QVT/20140401/EMOF")]
    [XmlNamespacePrefixAttribute("emof")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/EMOF#//Parameter")]
    [DebuggerDisplayAttribute("Parameter {Name}")]
    public partial class Parameter : TypedElement, LL.MDE.Components.Qvt.Metamodel.EMOF.IParameter, IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _operationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOperationReference);
        
        /// <summary>
        /// The backing field for the IsOrdered property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<bool> _isOrdered = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isOrderedAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsOrderedAttribute);
        
        /// <summary>
        /// The backing field for the IsUnique property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<bool> _isUnique = true;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isUniqueAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsUniqueAttribute);
        
        /// <summary>
        /// The backing field for the Lower property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _lower = 1;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _lowerAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveLowerAttribute);
        
        /// <summary>
        /// The backing field for the Upper property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _upper = 1;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _upperAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveUpperAttribute);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The operation property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("operation")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedParameter")]
        public LL.MDE.Components.Qvt.Metamodel.EMOF.IOperation Operation
        {
            get
            {
                return ModelHelper.CastAs<LL.MDE.Components.Qvt.Metamodel.EMOF.IOperation>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The isOrdered property
        /// </summary>
        [DefaultValueAttribute(false)]
        [DisplayNameAttribute("isOrdered")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("isOrdered")]
        [XmlAttributeAttribute(true)]
        public Nullable<bool> IsOrdered
        {
            get
            {
                return this._isOrdered;
            }
            set
            {
                if ((this._isOrdered != value))
                {
                    Nullable<bool> old = this._isOrdered;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsOrderedChanging(e);
                    this.OnPropertyChanging("IsOrdered", e, _isOrderedAttribute);
                    this._isOrdered = value;
                    this.OnIsOrderedChanged(e);
                    this.OnPropertyChanged("IsOrdered", e, _isOrderedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The isUnique property
        /// </summary>
        [DefaultValueAttribute(true)]
        [DisplayNameAttribute("isUnique")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("isUnique")]
        [XmlAttributeAttribute(true)]
        public Nullable<bool> IsUnique
        {
            get
            {
                return this._isUnique;
            }
            set
            {
                if ((this._isUnique != value))
                {
                    Nullable<bool> old = this._isUnique;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsUniqueChanging(e);
                    this.OnPropertyChanging("IsUnique", e, _isUniqueAttribute);
                    this._isUnique = value;
                    this.OnIsUniqueChanged(e);
                    this.OnPropertyChanged("IsUnique", e, _isUniqueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lower property
        /// </summary>
        [DefaultValueAttribute(1)]
        [DisplayNameAttribute("lower")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("lower")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Lower
        {
            get
            {
                return this._lower;
            }
            set
            {
                if ((this._lower != value))
                {
                    Nullable<int> old = this._lower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowerChanging(e);
                    this.OnPropertyChanging("Lower", e, _lowerAttribute);
                    this._lower = value;
                    this.OnLowerChanged(e);
                    this.OnPropertyChanged("Lower", e, _lowerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The upper property
        /// </summary>
        [DefaultValueAttribute(1)]
        [DisplayNameAttribute("upper")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("upper")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Upper
        {
            get
            {
                return this._upper;
            }
            set
            {
                if ((this._upper != value))
                {
                    Nullable<int> old = this._upper;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUpperChanging(e);
                    this.OnPropertyChanging("Upper", e, _upperAttribute);
                    this._upper = value;
                    this.OnUpperChanged(e);
                    this.OnPropertyChanged("Upper", e, _upperAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ParameterChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ParameterReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/EMOF#//Parameter")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Operation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperationChanging;
        
        /// <summary>
        /// Gets fired when the Operation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperationChanged;
        
        /// <summary>
        /// Gets fired when the IsOrdered property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsOrderedChanged;
        
        /// <summary>
        /// Gets fired before the IsOrdered property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsOrderedChanging;
        
        /// <summary>
        /// Gets fired when the IsUnique property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsUniqueChanged;
        
        /// <summary>
        /// Gets fired before the IsUnique property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsUniqueChanging;
        
        /// <summary>
        /// Gets fired when the Lower property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerChanged;
        
        /// <summary>
        /// Gets fired before the Lower property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerChanging;
        
        /// <summary>
        /// Gets fired when the Upper property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UpperChanged;
        
        /// <summary>
        /// Gets fired before the Upper property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UpperChanging;
        
        private static NMF.Models.Meta.ITypedElement RetrieveOperationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.EMOF.Parameter.ClassInstance)).Resolve("operation")));
        }
        
        /// <summary>
        /// Raises the OperationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            LL.MDE.Components.Qvt.Metamodel.EMOF.IOperation oldOperation = ModelHelper.CastAs<LL.MDE.Components.Qvt.Metamodel.EMOF.IOperation>(oldParent);
            LL.MDE.Components.Qvt.Metamodel.EMOF.IOperation newOperation = ModelHelper.CastAs<LL.MDE.Components.Qvt.Metamodel.EMOF.IOperation>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldOperation, newOperation);
            this.OnOperationChanging(e);
            this.OnPropertyChanging("Operation", e, _operationReference);
        }
        
        /// <summary>
        /// Raises the OperationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            LL.MDE.Components.Qvt.Metamodel.EMOF.IOperation oldOperation = ModelHelper.CastAs<LL.MDE.Components.Qvt.Metamodel.EMOF.IOperation>(oldParent);
            LL.MDE.Components.Qvt.Metamodel.EMOF.IOperation newOperation = ModelHelper.CastAs<LL.MDE.Components.Qvt.Metamodel.EMOF.IOperation>(newParent);
            if ((oldOperation != null))
            {
                oldOperation.OwnedParameter.Remove(this);
            }
            if ((newOperation != null))
            {
                newOperation.OwnedParameter.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldOperation, newOperation);
            this.OnOperationChanged(e);
            this.OnPropertyChanged("Operation", e, _operationReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsOrderedAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.EMOF.MultiplicityElement.ClassInstance)).Resolve("isOrdered")));
        }
        
        /// <summary>
        /// Raises the IsOrderedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsOrderedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsOrderedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsOrderedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsOrderedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsOrderedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsUniqueAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.EMOF.MultiplicityElement.ClassInstance)).Resolve("isUnique")));
        }
        
        /// <summary>
        /// Raises the IsUniqueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsUniqueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsUniqueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsUniqueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsUniqueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsUniqueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveLowerAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.EMOF.MultiplicityElement.ClassInstance)).Resolve("lower")));
        }
        
        /// <summary>
        /// Raises the LowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveUpperAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.EMOF.MultiplicityElement.ClassInstance)).Resolve("upper")));
        }
        
        /// <summary>
        /// Raises the UpperChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UpperChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UpperChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UpperChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "OPERATION"))
            {
                return this.Operation;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISORDERED"))
            {
                return this.IsOrdered;
            }
            if ((attribute == "ISUNIQUE"))
            {
                return this.IsUnique;
            }
            if ((attribute == "LOWER"))
            {
                return this.Lower;
            }
            if ((attribute == "UPPER"))
            {
                return this.Upper;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPERATION"))
            {
                this.Operation = ((LL.MDE.Components.Qvt.Metamodel.EMOF.IOperation)(value));
                return;
            }
            if ((feature == "ISORDERED"))
            {
                this.IsOrdered = ((bool)(value));
                return;
            }
            if ((feature == "ISUNIQUE"))
            {
                this.IsUnique = ((bool)(value));
                return;
            }
            if ((feature == "LOWER"))
            {
                this.Lower = ((int)(value));
                return;
            }
            if ((feature == "UPPER"))
            {
                this.Upper = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISORDERED"))
            {
                return Observable.Box(new IsOrderedProxy(this));
            }
            if ((attribute == "ISUNIQUE"))
            {
                return Observable.Box(new IsUniqueProxy(this));
            }
            if ((attribute == "LOWER"))
            {
                return Observable.Box(new LowerProxy(this));
            }
            if ((attribute == "UPPER"))
            {
                return Observable.Box(new UpperProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OPERATION"))
            {
                return new OperationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/EMOF#//Parameter")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Parameter class
        /// </summary>
        public class ParameterChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Parameter _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ParameterChildrenCollection(Parameter parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Parameter class
        /// </summary>
        public class ParameterReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Parameter _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ParameterReferencedElementsCollection(Parameter parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Operation != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.OperationChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.OperationChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Operation == null))
                {
                    LL.MDE.Components.Qvt.Metamodel.EMOF.IOperation operationCasted = item.As<LL.MDE.Components.Qvt.Metamodel.EMOF.IOperation>();
                    if ((operationCasted != null))
                    {
                        this._parent.Operation = operationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Operation = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Operation))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Operation != null))
                {
                    array[arrayIndex] = this._parent.Operation;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Operation == item))
                {
                    this._parent.Operation = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Operation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the operation property
        /// </summary>
        private sealed class OperationProxy : ModelPropertyChange<LL.MDE.Components.Qvt.Metamodel.EMOF.IParameter, LL.MDE.Components.Qvt.Metamodel.EMOF.IOperation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperationProxy(LL.MDE.Components.Qvt.Metamodel.EMOF.IParameter modelElement) : 
                    base(modelElement, "operation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override LL.MDE.Components.Qvt.Metamodel.EMOF.IOperation Value
            {
                get
                {
                    return this.ModelElement.Operation;
                }
                set
                {
                    this.ModelElement.Operation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isOrdered property
        /// </summary>
        private sealed class IsOrderedProxy : ModelPropertyChange<IMultiplicityElement, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsOrderedProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "isOrdered")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.IsOrdered;
                }
                set
                {
                    this.ModelElement.IsOrdered = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isUnique property
        /// </summary>
        private sealed class IsUniqueProxy : ModelPropertyChange<IMultiplicityElement, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsUniqueProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "isUnique")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.IsUnique;
                }
                set
                {
                    this.ModelElement.IsUnique = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lower property
        /// </summary>
        private sealed class LowerProxy : ModelPropertyChange<IMultiplicityElement, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "lower")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Lower;
                }
                set
                {
                    this.ModelElement.Lower = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the upper property
        /// </summary>
        private sealed class UpperProxy : ModelPropertyChange<IMultiplicityElement, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpperProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "upper")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Upper;
                }
                set
                {
                    this.ModelElement.Upper = value;
                }
            }
        }
    }
}
