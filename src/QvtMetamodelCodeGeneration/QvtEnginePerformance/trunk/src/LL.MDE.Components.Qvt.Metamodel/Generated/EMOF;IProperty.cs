//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LL.MDE.Components.Qvt.Metamodel.EMOF
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The public interface for Property
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Property))]
    [XmlDefaultImplementationTypeAttribute(typeof(Property))]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/EMOF#//Property")]
    public interface IProperty : IModelElement, IMultiplicityElement, LL.MDE.Components.Qvt.Metamodel.EMOF.ITypedElement
    {
        
        /// <summary>
        /// The default property
        /// </summary>
        [DisplayNameAttribute("default")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("default")]
        [XmlAttributeAttribute(true)]
        string Default
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isComposite property
        /// </summary>
        [DefaultValueAttribute(false)]
        [DisplayNameAttribute("isComposite")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("isComposite")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> IsComposite
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isDerived property
        /// </summary>
        [DefaultValueAttribute(false)]
        [DisplayNameAttribute("isDerived")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("isDerived")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> IsDerived
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isID property
        /// </summary>
        [DisplayNameAttribute("isID")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("isID")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> IsID
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isReadOnly property
        /// </summary>
        [DefaultValueAttribute(false)]
        [DisplayNameAttribute("isReadOnly")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("isReadOnly")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> IsReadOnly
        {
            get;
            set;
        }
        
        /// <summary>
        /// The class property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("class")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedAttribute")]
        LL.MDE.Components.Qvt.Metamodel.EMOF.IClass Class
        {
            get;
            set;
        }
        
        /// <summary>
        /// The opposite property
        /// </summary>
        [DisplayNameAttribute("opposite")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("opposite")]
        [XmlAttributeAttribute(true)]
        IProperty Opposite
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Default property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DefaultChanged;
        
        /// <summary>
        /// Gets fired before the Default property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DefaultChanging;
        
        /// <summary>
        /// Gets fired when the IsComposite property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsCompositeChanged;
        
        /// <summary>
        /// Gets fired before the IsComposite property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsCompositeChanging;
        
        /// <summary>
        /// Gets fired when the IsDerived property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsDerivedChanged;
        
        /// <summary>
        /// Gets fired before the IsDerived property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsDerivedChanging;
        
        /// <summary>
        /// Gets fired when the IsID property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsIDChanged;
        
        /// <summary>
        /// Gets fired before the IsID property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsIDChanging;
        
        /// <summary>
        /// Gets fired when the IsReadOnly property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsReadOnlyChanged;
        
        /// <summary>
        /// Gets fired before the IsReadOnly property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsReadOnlyChanging;
        
        /// <summary>
        /// Gets fired before the Class property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ClassChanging;
        
        /// <summary>
        /// Gets fired when the Class property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ClassChanged;
        
        /// <summary>
        /// Gets fired before the Opposite property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OppositeChanging;
        
        /// <summary>
        /// Gets fired when the Opposite property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OppositeChanged;
    }
}
