//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LL.MDE.Components.Qvt.Metamodel.EMOF
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The public interface for MultiplicityElement
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MultiplicityElement))]
    [XmlDefaultImplementationTypeAttribute(typeof(MultiplicityElement))]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/EMOF#//MultiplicityElement")]
    public interface IMultiplicityElement : IModelElement
    {
        
        /// <summary>
        /// The isOrdered property
        /// </summary>
        [DefaultValueAttribute(false)]
        [DisplayNameAttribute("isOrdered")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("isOrdered")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> IsOrdered
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isUnique property
        /// </summary>
        [DefaultValueAttribute(true)]
        [DisplayNameAttribute("isUnique")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("isUnique")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> IsUnique
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lower property
        /// </summary>
        [DefaultValueAttribute(1)]
        [DisplayNameAttribute("lower")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("lower")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Lower
        {
            get;
            set;
        }
        
        /// <summary>
        /// The upper property
        /// </summary>
        [DefaultValueAttribute(1)]
        [DisplayNameAttribute("upper")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("upper")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Upper
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the IsOrdered property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsOrderedChanged;
        
        /// <summary>
        /// Gets fired before the IsOrdered property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsOrderedChanging;
        
        /// <summary>
        /// Gets fired when the IsUnique property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsUniqueChanged;
        
        /// <summary>
        /// Gets fired before the IsUnique property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsUniqueChanging;
        
        /// <summary>
        /// Gets fired when the Lower property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowerChanged;
        
        /// <summary>
        /// Gets fired before the Lower property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowerChanging;
        
        /// <summary>
        /// Gets fired when the Upper property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UpperChanged;
        
        /// <summary>
        /// Gets fired before the Upper property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UpperChanging;
    }
}
