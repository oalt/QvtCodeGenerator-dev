//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LL.MDE.Components.Qvt.Metamodel.EMOF
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The default implementation of the ReflectiveCollection class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/QVT/20140401/EMOF")]
    [XmlNamespacePrefixAttribute("emof")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/EMOF#//ReflectiveCollection")]
    public partial class ReflectiveCollection : Object, IReflectiveCollection, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _addOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAddOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _addAllOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAddAllOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _clearOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveClearOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _removeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveRemoveOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _sizeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSizeOperation);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/EMOF#//ReflectiveCollection")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the operation add gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> AddCalling;
        
        /// <summary>
        /// Gets fired after the operation add got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> AddCalled;
        
        /// <summary>
        /// Gets fired before the operation addAll gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> AddAllCalling;
        
        /// <summary>
        /// Gets fired after the operation addAll got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> AddAllCalled;
        
        /// <summary>
        /// Gets fired before the operation clear gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> ClearCalling;
        
        /// <summary>
        /// Gets fired after the operation clear got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> ClearCalled;
        
        /// <summary>
        /// Gets fired before the operation remove gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> RemoveCalling;
        
        /// <summary>
        /// Gets fired after the operation remove got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> RemoveCalled;
        
        /// <summary>
        /// Gets fired before the operation size gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> SizeCalling;
        
        /// <summary>
        /// Gets fired after the operation size got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> SizeCalled;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="object"></param>
        public bool Add(IObject @object)
        {
            System.Func<IReflectiveCollection, IObject, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReflectiveCollection, IObject, bool>>(_addOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method add registered. Use the method broker to re" +
                        "gister a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _addOperation.Value, @object);
            this.OnAddCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _addOperation.Value, e));
            bool result = handler.Invoke(this, @object);
            e.Result = result;
            this.OnAddCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _addOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAddOperation()
        {
            return ClassInstance.LookupOperation("add");
        }
        
        /// <summary>
        /// Raises the AddCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAddCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.AddCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AddCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAddCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.AddCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="objects"></param>
        public bool AddAll(IReflectiveSequence objects)
        {
            System.Func<IReflectiveCollection, IReflectiveSequence, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReflectiveCollection, IReflectiveSequence, bool>>(_addAllOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method addAll registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _addAllOperation.Value, objects);
            this.OnAddAllCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _addAllOperation.Value, e));
            bool result = handler.Invoke(this, objects);
            e.Result = result;
            this.OnAddAllCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _addAllOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAddAllOperation()
        {
            return ClassInstance.LookupOperation("addAll");
        }
        
        /// <summary>
        /// Raises the AddAllCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAddAllCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.AddAllCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AddAllCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAddAllCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.AddAllCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        public void Clear()
        {
            System.Action<IReflectiveCollection> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IReflectiveCollection>>(_clearOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method clear registered. Use the method broker to " +
                        "register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _clearOperation.Value);
            this.OnClearCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _clearOperation.Value, e));
            handler.Invoke(this);
            this.OnClearCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _clearOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveClearOperation()
        {
            return ClassInstance.LookupOperation("clear");
        }
        
        /// <summary>
        /// Raises the ClearCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClearCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.ClearCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClearCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClearCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.ClearCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="object"></param>
        public bool Remove(IObject @object)
        {
            System.Func<IReflectiveCollection, IObject, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReflectiveCollection, IObject, bool>>(_removeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method remove registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _removeOperation.Value, @object);
            this.OnRemoveCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _removeOperation.Value, e));
            bool result = handler.Invoke(this, @object);
            e.Result = result;
            this.OnRemoveCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _removeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveRemoveOperation()
        {
            return ClassInstance.LookupOperation("remove");
        }
        
        /// <summary>
        /// Raises the RemoveCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemoveCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.RemoveCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RemoveCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemoveCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.RemoveCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        public int Size()
        {
            System.Func<IReflectiveCollection, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReflectiveCollection, int>>(_sizeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method size registered. Use the method broker to r" +
                        "egister a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _sizeOperation.Value);
            this.OnSizeCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _sizeOperation.Value, e));
            int result = handler.Invoke(this);
            e.Result = result;
            this.OnSizeCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _sizeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSizeOperation()
        {
            return ClassInstance.LookupOperation("size");
        }
        
        /// <summary>
        /// Raises the SizeCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.SizeCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SizeCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.SizeCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/EMOF#//ReflectiveCollection")));
            }
            return _classInstance;
        }
    }
}
