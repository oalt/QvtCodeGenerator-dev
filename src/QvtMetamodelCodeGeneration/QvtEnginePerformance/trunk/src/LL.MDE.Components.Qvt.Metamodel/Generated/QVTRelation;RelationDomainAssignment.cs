//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LL.MDE.Components.Qvt.Metamodel.QVTRelation
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using LL.MDE.Components.Qvt.Metamodel.QVTBase;
    using LL.MDE.Components.Qvt.Metamodel.QVTTemplate;
    using NMF.Models.Repository;
    using LL.MDE.Components.Qvt.Metamodel.EMOF;
    using System.Collections.Specialized;
    using LL.MDE.Components.Qvt.Metamodel.EssentialOCL;
    
    
    /// <summary>
    /// The default implementation of the RelationDomainAssignment class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/QVT/20140401/QVTRelation")]
    [XmlNamespacePrefixAttribute("qvtrelation")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/QVTRelation#//RelationDomainAssignment")]
    public partial class RelationDomainAssignment : Element, IRelationDomainAssignment, IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownerReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnerReference);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _valueExpReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveValueExpReference);
        
        /// <summary>
        /// The backing field for the ValueExp property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IOclExpression _valueExp;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _variableReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveVariableReference);
        
        /// <summary>
        /// The backing field for the Variable property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IVariable _variable;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The owner property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("owner")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("defaultAssignment")]
        public IRelationDomain Owner
        {
            get
            {
                return ModelHelper.CastAs<IRelationDomain>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The valueExp property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("valueExp")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IOclExpression ValueExp
        {
            get
            {
                return this._valueExp;
            }
            set
            {
                if ((this._valueExp != value))
                {
                    IOclExpression old = this._valueExp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueExpChanging(e);
                    this.OnPropertyChanging("ValueExp", e, _valueExpReference);
                    this._valueExp = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetValueExp;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetValueExp;
                    }
                    this.OnValueExpChanged(e);
                    this.OnPropertyChanged("ValueExp", e, _valueExpReference);
                }
            }
        }
        
        /// <summary>
        /// The variable property
        /// </summary>
        [DisplayNameAttribute("variable")]
        [CategoryAttribute("RelationDomainAssignment")]
        [XmlElementNameAttribute("variable")]
        [XmlAttributeAttribute(true)]
        public IVariable Variable
        {
            get
            {
                return this._variable;
            }
            set
            {
                if ((this._variable != value))
                {
                    IVariable old = this._variable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVariableChanging(e);
                    this.OnPropertyChanging("Variable", e, _variableReference);
                    this._variable = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetVariable;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetVariable;
                    }
                    this.OnVariableChanged(e);
                    this.OnPropertyChanged("Variable", e, _variableReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new RelationDomainAssignmentChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RelationDomainAssignmentReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/QVTRelation#//RelationDomainAssignment")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Owner property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OwnerChanging;
        
        /// <summary>
        /// Gets fired when the Owner property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OwnerChanged;
        
        /// <summary>
        /// Gets fired before the ValueExp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueExpChanging;
        
        /// <summary>
        /// Gets fired when the ValueExp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueExpChanged;
        
        /// <summary>
        /// Gets fired before the Variable property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VariableChanging;
        
        /// <summary>
        /// Gets fired when the Variable property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VariableChanged;
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnerReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.QVTRelation.RelationDomainAssignment.ClassInstance)).Resolve("owner")));
        }
        
        /// <summary>
        /// Raises the OwnerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOwnerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OwnerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IRelationDomain oldOwner = ModelHelper.CastAs<IRelationDomain>(oldParent);
            IRelationDomain newOwner = ModelHelper.CastAs<IRelationDomain>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldOwner, newOwner);
            this.OnOwnerChanging(e);
            this.OnPropertyChanging("Owner", e, _ownerReference);
        }
        
        /// <summary>
        /// Raises the OwnerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOwnerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OwnerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IRelationDomain oldOwner = ModelHelper.CastAs<IRelationDomain>(oldParent);
            IRelationDomain newOwner = ModelHelper.CastAs<IRelationDomain>(newParent);
            if ((oldOwner != null))
            {
                oldOwner.DefaultAssignment.Remove(this);
            }
            if ((newOwner != null))
            {
                newOwner.DefaultAssignment.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldOwner, newOwner);
            this.OnOwnerChanged(e);
            this.OnPropertyChanged("Owner", e, _ownerReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveValueExpReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.QVTRelation.RelationDomainAssignment.ClassInstance)).Resolve("valueExp")));
        }
        
        /// <summary>
        /// Raises the ValueExpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueExpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueExpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueExpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueExpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueExpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ValueExp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetValueExp(object sender, System.EventArgs eventArgs)
        {
            this.ValueExp = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveVariableReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.QVTRelation.RelationDomainAssignment.ClassInstance)).Resolve("variable")));
        }
        
        /// <summary>
        /// Raises the VariableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVariableChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VariableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VariableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVariableChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VariableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Variable property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVariable(object sender, System.EventArgs eventArgs)
        {
            this.Variable = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.ValueExp))
            {
                return ModelHelper.CreatePath("valueExp");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "OWNER"))
            {
                return this.Owner;
            }
            if ((reference == "VALUEEXP"))
            {
                return this.ValueExp;
            }
            if ((reference == "VARIABLE"))
            {
                return this.Variable;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OWNER"))
            {
                this.Owner = ((IRelationDomain)(value));
                return;
            }
            if ((feature == "VALUEEXP"))
            {
                this.ValueExp = ((IOclExpression)(value));
                return;
            }
            if ((feature == "VARIABLE"))
            {
                this.Variable = ((IVariable)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OWNER"))
            {
                return new OwnerProxy(this);
            }
            if ((reference == "VALUEEXP"))
            {
                return new ValueExpProxy(this);
            }
            if ((reference == "VARIABLE"))
            {
                return new VariableProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/QVTRelation#//RelationDomainAssignment")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RelationDomainAssignment class
        /// </summary>
        public class RelationDomainAssignmentChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RelationDomainAssignment _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RelationDomainAssignmentChildrenCollection(RelationDomainAssignment parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ValueExp != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.ValueExpChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.ValueExpChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ValueExp == null))
                {
                    IOclExpression valueExpCasted = item.As<IOclExpression>();
                    if ((valueExpCasted != null))
                    {
                        this._parent.ValueExp = valueExpCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ValueExp = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ValueExp))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ValueExp != null))
                {
                    array[arrayIndex] = this._parent.ValueExp;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ValueExp == item))
                {
                    this._parent.ValueExp = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ValueExp).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RelationDomainAssignment class
        /// </summary>
        public class RelationDomainAssignmentReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RelationDomainAssignment _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RelationDomainAssignmentReferencedElementsCollection(RelationDomainAssignment parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Owner != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ValueExp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Variable != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.OwnerChanged += this.PropagateValueChanges;
                this._parent.ValueExpChanged += this.PropagateValueChanges;
                this._parent.VariableChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.OwnerChanged -= this.PropagateValueChanges;
                this._parent.ValueExpChanged -= this.PropagateValueChanges;
                this._parent.VariableChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Owner == null))
                {
                    IRelationDomain ownerCasted = item.As<IRelationDomain>();
                    if ((ownerCasted != null))
                    {
                        this._parent.Owner = ownerCasted;
                        return;
                    }
                }
                if ((this._parent.ValueExp == null))
                {
                    IOclExpression valueExpCasted = item.As<IOclExpression>();
                    if ((valueExpCasted != null))
                    {
                        this._parent.ValueExp = valueExpCasted;
                        return;
                    }
                }
                if ((this._parent.Variable == null))
                {
                    IVariable variableCasted = item.As<IVariable>();
                    if ((variableCasted != null))
                    {
                        this._parent.Variable = variableCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Owner = null;
                this._parent.ValueExp = null;
                this._parent.Variable = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Owner))
                {
                    return true;
                }
                if ((item == this._parent.ValueExp))
                {
                    return true;
                }
                if ((item == this._parent.Variable))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Owner != null))
                {
                    array[arrayIndex] = this._parent.Owner;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ValueExp != null))
                {
                    array[arrayIndex] = this._parent.ValueExp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Variable != null))
                {
                    array[arrayIndex] = this._parent.Variable;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Owner == item))
                {
                    this._parent.Owner = null;
                    return true;
                }
                if ((this._parent.ValueExp == item))
                {
                    this._parent.ValueExp = null;
                    return true;
                }
                if ((this._parent.Variable == item))
                {
                    this._parent.Variable = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Owner).Concat(this._parent.ValueExp).Concat(this._parent.Variable).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the owner property
        /// </summary>
        private sealed class OwnerProxy : ModelPropertyChange<IRelationDomainAssignment, IRelationDomain>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OwnerProxy(IRelationDomainAssignment modelElement) : 
                    base(modelElement, "owner")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRelationDomain Value
            {
                get
                {
                    return this.ModelElement.Owner;
                }
                set
                {
                    this.ModelElement.Owner = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the valueExp property
        /// </summary>
        private sealed class ValueExpProxy : ModelPropertyChange<IRelationDomainAssignment, IOclExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueExpProxy(IRelationDomainAssignment modelElement) : 
                    base(modelElement, "valueExp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOclExpression Value
            {
                get
                {
                    return this.ModelElement.ValueExp;
                }
                set
                {
                    this.ModelElement.ValueExp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the variable property
        /// </summary>
        private sealed class VariableProxy : ModelPropertyChange<IRelationDomainAssignment, IVariable>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VariableProxy(IRelationDomainAssignment modelElement) : 
                    base(modelElement, "variable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IVariable Value
            {
                get
                {
                    return this.ModelElement.Variable;
                }
                set
                {
                    this.ModelElement.Variable = value;
                }
            }
        }
    }
}
