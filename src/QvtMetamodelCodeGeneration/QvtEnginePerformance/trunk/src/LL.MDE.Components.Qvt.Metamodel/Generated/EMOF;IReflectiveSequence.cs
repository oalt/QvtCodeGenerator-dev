//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LL.MDE.Components.Qvt.Metamodel.EMOF
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The public interface for ReflectiveSequence
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ReflectiveSequence))]
    [XmlDefaultImplementationTypeAttribute(typeof(ReflectiveSequence))]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/EMOF#//ReflectiveSequence")]
    public interface IReflectiveSequence : IModelElement, IReflectiveCollection
    {
        
        /// <summary>
        /// Gets fired before the operation add gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> AddCalling;
        
        /// <summary>
        /// Gets fired after the operation add got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> AddCalled;
        
        /// <summary>
        /// Gets fired before the operation get gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> GetCalling;
        
        /// <summary>
        /// Gets fired after the operation get got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> GetCalled;
        
        /// <summary>
        /// Gets fired before the operation remove gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> RemoveCalling;
        
        /// <summary>
        /// Gets fired after the operation remove got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> RemoveCalled;
        
        /// <summary>
        /// Gets fired before the operation set gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> SetCalling;
        
        /// <summary>
        /// Gets fired after the operation set got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> SetCalled;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="index"></param>
        /// <param name="object"></param>
        void Add(int index, IObject @object);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="index"></param>
        IObject Get(int index);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="index"></param>
        IObject Remove(int index);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="index"></param>
        /// <param name="object"></param>
        IObject Set(int index, IObject @object);
    }
}
