//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LL.MDE.Components.Qvt.Metamodel.QVTTemplate
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using LL.MDE.Components.Qvt.Metamodel.EssentialOCL;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    using LL.MDE.Components.Qvt.Metamodel.EMOF;
    
    
    /// <summary>
    /// The default implementation of the CollectionTemplateExp class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/QVT/20140401/QVTTemplate")]
    [XmlNamespacePrefixAttribute("qvttemplate")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/QVTTemplate#//CollectionTemplateExp")]
    [DebuggerDisplayAttribute("CollectionTemplateExp {Name}")]
    public partial class CollectionTemplateExp : TemplateExp, ICollectionTemplateExp, IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _memberReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveMemberReference);
        
        /// <summary>
        /// The backing field for the Member property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IOclExpression> _member;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _referredCollectionTypeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveReferredCollectionTypeReference);
        
        /// <summary>
        /// The backing field for the ReferredCollectionType property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ICollectionType _referredCollectionType;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _restReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRestReference);
        
        /// <summary>
        /// The backing field for the Rest property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IVariable _rest;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public CollectionTemplateExp()
        {
            this._member = new ObservableCompositionOrderedSet<IOclExpression>(this);
            this._member.CollectionChanging += this.MemberCollectionChanging;
            this._member.CollectionChanged += this.MemberCollectionChanged;
        }
        
        /// <summary>
        /// The member property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("member")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IOclExpression> Member
        {
            get
            {
                return this._member;
            }
        }
        
        /// <summary>
        /// The referredCollectionType property
        /// </summary>
        [DisplayNameAttribute("referredCollectionType")]
        [CategoryAttribute("CollectionTemplateExp")]
        [XmlElementNameAttribute("referredCollectionType")]
        [XmlAttributeAttribute(true)]
        public ICollectionType ReferredCollectionType
        {
            get
            {
                return this._referredCollectionType;
            }
            set
            {
                if ((this._referredCollectionType != value))
                {
                    ICollectionType old = this._referredCollectionType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReferredCollectionTypeChanging(e);
                    this.OnPropertyChanging("ReferredCollectionType", e, _referredCollectionTypeReference);
                    this._referredCollectionType = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetReferredCollectionType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetReferredCollectionType;
                    }
                    this.OnReferredCollectionTypeChanged(e);
                    this.OnPropertyChanged("ReferredCollectionType", e, _referredCollectionTypeReference);
                }
            }
        }
        
        /// <summary>
        /// The rest property
        /// </summary>
        [DisplayNameAttribute("rest")]
        [CategoryAttribute("CollectionTemplateExp")]
        [XmlElementNameAttribute("rest")]
        [XmlAttributeAttribute(true)]
        public IVariable Rest
        {
            get
            {
                return this._rest;
            }
            set
            {
                if ((this._rest != value))
                {
                    IVariable old = this._rest;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRestChanging(e);
                    this.OnPropertyChanging("Rest", e, _restReference);
                    this._rest = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRest;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRest;
                    }
                    this.OnRestChanged(e);
                    this.OnPropertyChanged("Rest", e, _restReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new CollectionTemplateExpChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CollectionTemplateExpReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/QVTTemplate#//CollectionTemplateExp")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ReferredCollectionType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReferredCollectionTypeChanging;
        
        /// <summary>
        /// Gets fired when the ReferredCollectionType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReferredCollectionTypeChanged;
        
        /// <summary>
        /// Gets fired before the Rest property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RestChanging;
        
        /// <summary>
        /// Gets fired when the Rest property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RestChanged;
        
        private static NMF.Models.Meta.ITypedElement RetrieveMemberReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.QVTTemplate.CollectionTemplateExp.ClassInstance)).Resolve("member")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Member property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MemberCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Member", e, _memberReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Member property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MemberCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Member", e, _memberReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveReferredCollectionTypeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.QVTTemplate.CollectionTemplateExp.ClassInstance)).Resolve("referredCollectionType")));
        }
        
        /// <summary>
        /// Raises the ReferredCollectionTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReferredCollectionTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReferredCollectionTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReferredCollectionTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReferredCollectionTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReferredCollectionTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReferredCollectionType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReferredCollectionType(object sender, System.EventArgs eventArgs)
        {
            this.ReferredCollectionType = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRestReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(LL.MDE.Components.Qvt.Metamodel.QVTTemplate.CollectionTemplateExp.ClassInstance)).Resolve("rest")));
        }
        
        /// <summary>
        /// Raises the RestChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRestChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RestChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RestChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRestChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RestChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Rest property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRest(object sender, System.EventArgs eventArgs)
        {
            this.Rest = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int memberIndex = ModelHelper.IndexOfReference(this.Member, element);
            if ((memberIndex != -1))
            {
                return ModelHelper.CreatePath("member", memberIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "MEMBER"))
            {
                if ((index < this.Member.Count))
                {
                    return this.Member[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "REFERREDCOLLECTIONTYPE"))
            {
                return this.ReferredCollectionType;
            }
            if ((reference == "REST"))
            {
                return this.Rest;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "MEMBER"))
            {
                return this._member;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REFERREDCOLLECTIONTYPE"))
            {
                this.ReferredCollectionType = ((ICollectionType)(value));
                return;
            }
            if ((feature == "REST"))
            {
                this.Rest = ((IVariable)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "REFERREDCOLLECTIONTYPE"))
            {
                return new ReferredCollectionTypeProxy(this);
            }
            if ((reference == "REST"))
            {
                return new RestProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._member))
            {
                return "member";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/QVTTemplate#//CollectionTemplateExp")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CollectionTemplateExp class
        /// </summary>
        public class CollectionTemplateExpChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CollectionTemplateExp _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CollectionTemplateExpChildrenCollection(CollectionTemplateExp parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Member.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Member.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Member.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IOclExpression memberCasted = item.As<IOclExpression>();
                if ((memberCasted != null))
                {
                    this._parent.Member.Add(memberCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Member.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Member.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> memberEnumerator = this._parent.Member.GetEnumerator();
                try
                {
                    for (
                    ; memberEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = memberEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    memberEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IOclExpression oclExpressionItem = item.As<IOclExpression>();
                if (((oclExpressionItem != null) 
                            && this._parent.Member.Remove(oclExpressionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Member).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CollectionTemplateExp class
        /// </summary>
        public class CollectionTemplateExpReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CollectionTemplateExp _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CollectionTemplateExpReferencedElementsCollection(CollectionTemplateExp parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Member.Count);
                    if ((this._parent.ReferredCollectionType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Rest != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Member.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ReferredCollectionTypeChanged += this.PropagateValueChanges;
                this._parent.RestChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Member.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ReferredCollectionTypeChanged -= this.PropagateValueChanges;
                this._parent.RestChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IOclExpression memberCasted = item.As<IOclExpression>();
                if ((memberCasted != null))
                {
                    this._parent.Member.Add(memberCasted);
                }
                if ((this._parent.ReferredCollectionType == null))
                {
                    ICollectionType referredCollectionTypeCasted = item.As<ICollectionType>();
                    if ((referredCollectionTypeCasted != null))
                    {
                        this._parent.ReferredCollectionType = referredCollectionTypeCasted;
                        return;
                    }
                }
                if ((this._parent.Rest == null))
                {
                    IVariable restCasted = item.As<IVariable>();
                    if ((restCasted != null))
                    {
                        this._parent.Rest = restCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Member.Clear();
                this._parent.ReferredCollectionType = null;
                this._parent.Rest = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Member.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ReferredCollectionType))
                {
                    return true;
                }
                if ((item == this._parent.Rest))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> memberEnumerator = this._parent.Member.GetEnumerator();
                try
                {
                    for (
                    ; memberEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = memberEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    memberEnumerator.Dispose();
                }
                if ((this._parent.ReferredCollectionType != null))
                {
                    array[arrayIndex] = this._parent.ReferredCollectionType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Rest != null))
                {
                    array[arrayIndex] = this._parent.Rest;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IOclExpression oclExpressionItem = item.As<IOclExpression>();
                if (((oclExpressionItem != null) 
                            && this._parent.Member.Remove(oclExpressionItem)))
                {
                    return true;
                }
                if ((this._parent.ReferredCollectionType == item))
                {
                    this._parent.ReferredCollectionType = null;
                    return true;
                }
                if ((this._parent.Rest == item))
                {
                    this._parent.Rest = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Member).Concat(this._parent.ReferredCollectionType).Concat(this._parent.Rest).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the referredCollectionType property
        /// </summary>
        private sealed class ReferredCollectionTypeProxy : ModelPropertyChange<ICollectionTemplateExp, ICollectionType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReferredCollectionTypeProxy(ICollectionTemplateExp modelElement) : 
                    base(modelElement, "referredCollectionType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICollectionType Value
            {
                get
                {
                    return this.ModelElement.ReferredCollectionType;
                }
                set
                {
                    this.ModelElement.ReferredCollectionType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rest property
        /// </summary>
        private sealed class RestProxy : ModelPropertyChange<ICollectionTemplateExp, IVariable>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RestProxy(ICollectionTemplateExp modelElement) : 
                    base(modelElement, "rest")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IVariable Value
            {
                get
                {
                    return this.ModelElement.Rest;
                }
                set
                {
                    this.ModelElement.Rest = value;
                }
            }
        }
    }
}
